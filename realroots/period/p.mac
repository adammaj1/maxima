kill(all);
remvalue(all);


// try to have the same number of the pixels = n
// inside each hyperbolic component of Mandelbrot set along real axis
// width of components 

long double GivePixelWidth(unsigned int period, unsigned int n)
{

  long double w ;
  unsigned int k;

 switch ( period )
 {  // A SCALING CONSTANT EQUAL TO UNITY IN 1D QUADRATIC MAPS M. ROMERA, G. PASTOR and F. MONTOYA
   case      0 : w=(CxMax-CxMin)/n;      break;
   case      1 : w=1.000000000000L/n;    break; // exact value
   case      2 : w=0.310700264133L/n;    break; // numerical approximation , maybe wrong 
   case      4 : w=0.070844843095L/n;    break; // w(2*p) = w(p)/f  ; f =  Feigenbaum constant
   case      8 : w=0.015397875272L/n;    break;
   case     16 : w=0.003307721510L/n;    break;
   case     32 : w=0.000708881730L/n;    break;
   case     64 : w=0.000151841994935L/n; break;
   case    128 : w=0.000032520887170L/n; break;
   case    256 : w=0.00000696502297L/n;  break;
   case    512 : w=0.000001491696694L/n; break;
   case   1024 : w=0.000000319475846L/n; break;
   case   2048 : w=0.000000068421948L/n; break;
   case   4096 : w=0.000000015L/n;       break;
   case   8192 : w=0.000000004L/n;       break;
   case  16384 : w=0.000000001L/n;       break;
   default : if (period == 2*jMax+3)  w=(CxMax-CxMin)/10.0L; // period not found or period > jMax
                else { k=period/16384; w = 0.000000001L; while (k>2) { w /=f; k /=2;};  w /=n;} // feigenbaum scaling  
 }

 return w;
}



/* real quadratic  diagram based on the code by Mario Rodriguez Riotorto using Maxima CAS draw packag  */



pts:[]; /* points of the orbit */

ls:[];
kMax1:2000;
kMax2:1000;
NoPeriod : -1;



roots:[];
periods:[];

iMax:1000;
c:0.25;
dc:(c+1.42)/iMax;
roots:cons([c,0],roots); /* first root */
checkP : false;

/* ------------- compute -----------------------------------*/

for  i:0 thru iMax  do 
    (
       
       z: 0.0,
       l:0, /* Lyapunov exponent */
       /* old l for finding roots */
       for k:1 thru kMax1  /*while (abs(z)<2)*/ do 
         (    
           z: z * z+c, /* to remove points from image compute and do not draw it */
           l:l+log(abs(2*z))
         ),
        zOld:z,
        z: z * z+c, /* one iteration for check while (abs(zOld-z)>dc)  */
        l:l+log(abs(2*z)),
         pts: cons([c,z], pts),/* save points to draw it later */
        k:1,
        while (abs(zOld-z)>dc) and k<=kMax2 do 
          ( 
           z:  z * z+c, /* compute and draw it */
           pts: cons([c,z], pts),/* save points to draw it later */
	   l:l+log(abs(2*z)),
           k:k+1
         ),
       if (abs(z)>2) 
           then period=0
           else (if (abs(zOld-z)<dc )
                     then period : k
                     else period : NoPeriod),
       periods:cons([c,period],periods),
       l:l/(kMax1+k),
       ls:cons([c,l],ls),   /* save points to draw it later */         
       if (l<lOld) 
         then ( if (checkP and c>-1.4011551890) then (checkP:false,roots:cons([c,0],roots)))   /*  found root ; desc:cons([c,0],desc)*/
         else checkP:true, /*   asc:cons([c,0],asc),    */
       lOld:l,
       c:c-dc
                     
    ); 
  tic:map(first,roots);
  tic:setify(tic);
  

/* =================  draw ======================================*/

path:"~/maxima/batch/realroots/period/"$ /* pwd  */
FileName:"r"$ /* without extension which is the terminal name */

load(draw);

draw(
  terminal  = 'svg,
  file_name = concat(path,FileName),
  
  dimensions=[1000,3000], /*  y = x*rows  */
  
  gr2d(points_joined =false,
   title      = "Bifurcation diagram, z[i+1] = z[i]*z[i] +c",
        xlabel     = "c parameter",
        ylabel     = "z ",
        xtics = tic,
        point_type = filled_circle,
        point_size = 0.2,
        color = black,
        points(pts) 
   ),

  gr2d(title = " Lyapunov exponent ",
   points_joined =true,
   yaxis       = true,
   xaxis 	= true,
   xtics = tic,
   xlabel     = "c parameter",
   ylabel     = " lyapunov exponent ",
   yrange = [-4,1],
   color         = red,
   point_size    = 0.5,
   point_type = filled_circle,
   points(ls),
   points_joined =false,
   point_size    = 1.5,
   color = black,
   points(roots)),

  gr2d(points_joined =false,
   title      = "periods",
        xlabel     = "c parameter",
        ylabel     = "period ",
yrange = [0,50],
        xtics = tic,
        point_type = filled_circle,
        point_size = 0.2,
        color = black,
        points(periods) 
   )

 );

